import axios from 'axios'
import axiosInstance from '../config/axios'
import type { Category, CategoryTreeNode, CreateCategoryDto, UpdateCategoryDto, CategoryFilters } from '../types/inventory/category.types'

const BASE_URL = '/categories'
const DEBUG = import.meta.env.DEV // Habilitar solo en desarrollo

/**
 * Obtener todas las categor√≠as
 */
export const getCategories = async (filters?: CategoryFilters): Promise<Category[]> => {
  if (DEBUG) {
    console.log('üì° [categoryService] getCategories - Solicitando categor√≠as con filtros:', filters)
  }
  
  try {
    const response = await axiosInstance.get(BASE_URL, { params: filters })
    
    if (DEBUG) {
      console.log('‚úÖ [categoryService] getCategories - Respuesta recibida:', {
        count: response.data.data?.length || 0,
        data: response.data.data
      })
    }
    
    return response.data.data || []
  } catch (error) {
    const errorMessage = '‚ùå [categoryService] getCategories - Error al obtener categor√≠as'
    console.error(errorMessage, error)
    throw handleApiError(error)
  }
}

/**
 * Obtener el √°rbol completo de categor√≠as
 */
export const getCategoryTree = async (): Promise<CategoryTreeNode[]> => {
  if (DEBUG) {
    console.log('üå≥ [categoryService] getCategoryTree - Solicitando √°rbol de categor√≠as')
  }
  
  try {
    const response = await axiosInstance.get(`${BASE_URL}/tree`)
    
    if (DEBUG) {
      console.log('‚úÖ [categoryService] getCategoryTree - √Årbol recibido:', {
        count: response.data.data?.length || 0,
        levels: getTreeDepth(response.data.data || [])
      })
    }
    
    return response.data.data || []
  } catch (error) {
    const errorMessage = '‚ùå [categoryService] getCategoryTree - Error al obtener el √°rbol de categor√≠as'
    console.error(errorMessage, error)
    throw handleApiError(error)
  }
}

// Funci√≥n auxiliar para calcular la profundidad del √°rbol
const getTreeDepth = (nodes: CategoryTreeNode[], depth = 0): number => {
  if (!nodes || nodes.length === 0) return depth
  const childDepths = nodes.map(node => getTreeDepth(node.children || [], depth + 1))
  return Math.max(depth, ...childDepths)
}

/**
 * Obtener una categor√≠a por ID
 */
export const getCategoryById = async (id: string): Promise<Category | null> => {
  if (DEBUG) {
    console.log(`üì° [categoryService] getCategoryById - Solicitando categor√≠a con ID: ${id}`)
  }
  
  try {
    const response = await axiosInstance.get(`${BASE_URL}/${id}`)
    
    if (DEBUG) {
      console.log(`‚úÖ [categoryService] getCategoryById - Categor√≠a ${id} encontrada:`, response.data.data)
    }
    
    return response.data.data || null
  } catch (error) {
    if (axios.isAxiosError(error) && error.response?.status === 404) {
      if (DEBUG) {
        console.log(`‚ÑπÔ∏è [categoryService] getCategoryById - Categor√≠a ${id} no encontrada`)
      }
      return null
    }
    
    const errorMessage = `‚ùå [categoryService] getCategoryById - Error al obtener categor√≠a ${id}`
    console.error(errorMessage, error)
    throw handleApiError(error)
  }
}

/**
 * Crear una nueva categor√≠a
 */
export const createCategory = async (categoryData: CreateCategoryDto): Promise<Category> => {
  if (DEBUG) {
    console.log('‚ûï [categoryService] createCategory - Creando nueva categor√≠a con datos:', categoryData)
  }
  
  try {
    const response = await axiosInstance.post(BASE_URL, categoryData)
    
    if (DEBUG) {
      console.log('‚úÖ [categoryService] createCategory - Categor√≠a creada exitosamente:', response.data.data)
    }
    
    return response.data.data
  } catch (error) {
    const errorMessage = '‚ùå [categoryService] createCategory - Error al crear categor√≠a'
    console.error(errorMessage, error)
    console.error('Datos de la solicitud fallida:', categoryData)
    throw handleApiError(error)
  }
}

/**
 * Actualizar una categor√≠a existente
 */
export const updateCategory = async (
  id: string,
  categoryData: UpdateCategoryDto
): Promise<Category> => {
  if (DEBUG) {
    console.log(`üîÑ [categoryService] updateCategory - Actualizando categor√≠a ${id} con datos:`, categoryData)
  }
  
  try {
    const response = await axiosInstance.put(`${BASE_URL}/${id}`, categoryData)
    
    if (DEBUG) {
      console.log(`‚úÖ [categoryService] updateCategory - Categor√≠a ${id} actualizada:`, response.data.data)
    }
    
    return response.data.data
  } catch (error) {
    const errorMessage = `‚ùå [categoryService] updateCategory - Error al actualizar categor√≠a ${id}`
    console.error(errorMessage, error)
    console.error('Datos de la solicitud fallida:', categoryData)
    throw handleApiError(error)
  }
}

/**
 * Eliminar una categor√≠a (soft delete)
 */
export const deleteCategory = async (id: string): Promise<boolean> => {
  if (DEBUG) {
    console.log(`üóëÔ∏è [categoryService] deleteCategory - Solicitando eliminaci√≥n de categor√≠a ${id}`)
  }
  
  try {
    await axiosInstance.delete(`${BASE_URL}/${id}`)
    
    if (DEBUG) {
      console.log(`‚úÖ [categoryService] deleteCategory - Categor√≠a ${id} eliminada exitosamente`)
    }
    
    return true
  } catch (error) {
    const errorMessage = `‚ùå [categoryService] deleteCategory - Error al eliminar categor√≠a ${id}`
    console.error(errorMessage, error)
    
    // Verificar si el error es porque la categor√≠a tiene productos asociados
    if (axios.isAxiosError(error) && error.response?.status === 400) {
      const errorData = error.response.data as { message?: string; details?: string }
      if (errorData.details?.includes('tiene productos asociados')) {
        console.error('‚ÑπÔ∏è [categoryService] deleteCategory - No se puede eliminar: La categor√≠a tiene productos asociados')
      }
    }
    
    throw handleApiError(error)
  }
}

/**
 * Mover una categor√≠a a otro padre
 */
export const moveCategory = async (
  id: string,
  parentId: string | null
): Promise<Category> => {
  if (DEBUG) {
    console.log(`üîÑ [categoryService] moveCategory - Moviendo categor√≠a ${id} al padre:`, parentId || 'ra√≠z')
  }
  
  try {
    const response = await axiosInstance.patch(`${BASE_URL}/${id}/move`, { parentId })
    
    if (DEBUG) {
      console.log(`‚úÖ [categoryService] moveCategory - Categor√≠a ${id} movida exitosamente a padre:`, 
        parentId || 'ra√≠z')
    }
    
    return response.data.data
  } catch (error) {
    const errorMessage = `‚ùå [categoryService] moveCategory - Error al mover categor√≠a ${id}`
    console.error(errorMessage, error)
    
    // Manejar errores espec√≠ficos de movimiento
    if (axios.isAxiosError(error) && error.response?.status === 400) {
      const errorData = error.response.data as { message?: string; details?: string }
      if (errorData.details?.includes('no puede ser padre de s√≠ misma')) {
        console.error('‚ÑπÔ∏è [categoryService] moveCategory - No se puede mover una categor√≠a dentro de s√≠ misma')
      } else if (errorData.details?.includes('crear√≠a un bucle en el √°rbol')) {
        console.error('‚ÑπÔ∏è [categoryService] moveCategory - No se puede crear un bucle en la jerarqu√≠a de categor√≠as')
      }
    }
    
    throw handleApiError(error)
  }
}

/**
 * Manejador de errores para las peticiones a la API
 */
const handleApiError = (error: unknown): Error => {
  let errorMessage = 'Error desconocido'
  let errorDetails: {
    status?: number
    statusText?: string
    url?: string
    method?: string
    data?: unknown
    responseData?: unknown
    stack?: string
  } = {}

  if (axios.isAxiosError(error)) {
    const response = error.response
    errorMessage = response?.data?.message || error.message || 'Error en la petici√≥n'
    
    errorDetails = {
      status: response?.status,
      statusText: response?.statusText,
      url: error.config?.url,
      method: error.config?.method,
      data: error.config?.data,
      responseData: response?.data
    }
    
    if (DEBUG) {
      console.error('üîç [categoryService] Detalles del error de API:', errorDetails)
    }
  } else if (error instanceof Error) {
    errorMessage = error.message
    errorDetails = { stack: error.stack }
  }
  
  const finalError = new Error(`[categoryService] ${errorMessage}`)
  if (DEBUG) {
    console.error('üìå [categoryService] Error final:', finalError)
  }
  
  return finalError
}
